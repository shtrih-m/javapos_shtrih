apply plugin: 'idea'
apply plugin: 'com.android.library'

clean.doFirst {
    delete "${rootDir}/../../dist/zip/android"
}

task prepareKotlinBuildScriptModel {
}

android {
    compileSdkVersion 25

    defaultConfig {
        minSdkVersion 12
        targetSdkVersion 25
        versionCode 1
        versionName "$version"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = ["${projectDir}/src", "${projectDir}/../../Core/src"]
            }
            res {
                srcDirs = ["${projectDir}/res"]
            }
            manifest {
                srcFile "${projectDir}/AndroidManifest.xml"
            }
            assets {
                srcDirs = ["${projectDir}/assets"]
            }
        }
        test {
            java {
                srcDirs = ["${projectDir}/test/"]
            }
            res {
                srcDirs = ["${projectDir}/test/res"]
            }
        }
        androidTest {
            java {
                srcDirs = ["${projectDir}/androidTest/"]
            }
            res {
                srcDirs = ["${projectDir}/androidTest/res"]
            }
            assets {
                srcDirs = ["${projectDir}/androidTest/assets"]
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    def releasePath = file("${rootDir}/../../dist/zip/android")

    def releaseTask = tasks.create(name: 'release') {
        group 'Build'
        description "Assembles and archives all Release builds"
    }

    // https://gist.github.com/lifuzu/9553671
    libraryVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            def build = variant.name.capitalize()

            def releaseBuildTask = tasks.create(name: "release${build}", type: Zip) {
                group 'Build'
                description "Assembles and archives apk and its proguard mapping for the $build build"
                destinationDir releasePath
                baseName "shtrihjavapos-android"

                def aarPath = "${rootDir}/FptrServiceAndroid/build/outputs/aar/FptrServiceAndroid-release.aar"

                from(aarPath)
                from "${rootDir}/tinyJavaPosTester/assets/jpos.xml"
                from "${rootDir}/../../Doc/SHTRIH/JposShtrih.docx"
                from "${rootDir}/lib/d2xx.jar"
                from "${rootDir}/lib/jpos113.jar"
                from "${rootDir}/lib/zxing-3.2.2.jar"
                from "${rootDir}/lib/slf4j-api-1.7.25.jar"
                from "${rootDir}/lib/slf4j-log4j12-1.7.25.jar"
                from "${rootDir}/lib/log4j-1.2.16.jar"
                from "${rootDir}/lib/android-logging-log4j-1.0.3"
            from "${rootDir}/lib/xerces4android.jar"
        }

        releaseBuildTask.dependsOn variant.assemble

        releaseTask.dependsOn releaseBuildTask

//            variant.productFlavors.each { flavor ->
//                def flavorName = flavor.name.capitalize()
//                def releaseFlavorTaskName = "release${flavorName}"
//                def releaseFlavorTask
//                if (tasks.findByName(releaseFlavorTaskName)) {
//                    releaseFlavorTask = tasks[releaseFlavorTaskName]
//                } else {
//                    releaseFlavorTask = tasks.create(name: releaseFlavorTaskName) {
//                        group 'Build'
//                        description "Assembles and archives all Release builds for flavor $flavorName"
//                    }
//                    releaseTask.dependsOn releaseFlavorTask
//                }
//                releaseFlavorTask.dependsOn releaseBuildTask
//            }
        }
    }
}

task utilVersionClass() {
    def clazz = new File("${projectDir}/src/com/shtrih/util/ServiceVersion.java")
    clazz.text = "package com.shtrih.util;\n\npublic class ServiceVersion {\n    public static final String VERSION = \"" + version + "\";\n}"
}

repositories {
    jcenter()

    flatDir {
        dirs = ["${projectDir}/../lib"]
    }
}

dependencies {

    api 'jpos:jpos113:1.13'
    api 'zxing:zxing:3.2.2'

    implementation 'd2xx:d2xx:1.0',
            'org.slf4j:slf4j-api:1.7.25',
            'xerces4android:xerces4android:1.0'
    implementation 'com.android.support:appcompat-v7:25.0.0'

    androidTestImplementation 'com.android.support:support-annotations:27.1.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'
    // Robolectric
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.robolectric:robolectric:3.2.2'
}